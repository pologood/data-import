<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bj58.chr.data.dao.mapper.ContractMapper">

	<resultMap id="CVContract" type="CVContract">
		<id property="id" column="id" />
		<result property="status" column="status" />
		<result property="coid" column="coid" />
		<result property="uid" column="uid" />
		<result property="data.emails" column="emails" />
		<result property="data.namemobiles" column="namemobiles" />
		<result property="createdTime" column="created_time" />
		<result property="updateTime" column="update_time" />
		<result property="loginTime" column="login_time" />
	</resultMap>

	<sql id="contractField">
		id,status,coid,uid,emails,namemobiles,created_time,update_time,login_time
	</sql>

	<insert id="save" parameterType="CVContract">
		insert into cv_contract
		(id,status,coid,uid,emails,namemobiles,created_time,update_time,login_time)
		values
		(null,#{status},#{coid},#{uid},#{data.emails},#{data.namemobiles},now(),now(),#{loginTime})
	</insert>

	<update id="update" parameterType="CVContract">
		update cv_contract
		<set>
			<if test=" data != null and data.emails != null ">
				emails=#{data.emails},
			</if>
			<if test=" data != null and data.namemobiles != null ">
				namemobiles=#{data.namemobiles},
			</if>
			<if test="updateTime != null">
			update_time = #{updateTime},
			</if>
			modify_time = now()
		</set>
		<where> coid = #{coid}</where>
	</update>

	<update id="updateUid" parameterType="map">
		update cv_contract set uid = #{uid}
		<where> coid = #{coid}</where>
	</update>

	<update id="updateTime" parameterType="map">
		update cv_contract set update_time = #{loginTime}
		<where> uid = #{uid}</where>
	</update>

	<select id="findByCoId" resultMap="CVContract" parameterType="String">
		select
		<include refid="contractField" />
		from cv_contract
		<where>
			coid=#{coid}
		</where>
	</select>

	<select id="findByUid" resultMap="CVContract" parameterType="String">
		select
		<include refid="contractField" />
		from cv_contract
		<where>
			uid=#{id}
		</where>
	</select>

	<select id="list" resultMap="CVContract" parameterType="map">
		select coid,uid from cv_contract order by id desc
		<if test="_parameter != null">
			limit #{pageRequest.offset},#{pageRequest.pageSize}
		</if>
	</select>

	<delete id="remove" parameterType="int">
		delete from cv_contract
		<where> id = #{id}</where>
	</delete>
	
	<select id="findCoidByMobile" resultType="String" parameterType="String">
		select coid from cv_contract where  namemobiles like concat('%', #{mobile},'') limit 1
	</select>

</mapper>
